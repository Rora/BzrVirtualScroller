@using System.Threading
@using Microsoft.Extensions.Logging

@typeparam TItem
@implements IDisposable
@inject ILogger<VirtualScroller<TItem>> Logger
@inject IJSRuntime JSRuntime

<div @ref="_containerElement">

    @for (var i = 0; i < _items.Count; i++)
    {
        var item = _items[i];
        var itemId = this.ItemKeySelector(item);

        <div @key="itemId" data-bzr-virtual-scroller-item-id="@itemId">
            @this.ItemTemplate(item)
        </div>
    }
</div>

@code {
    #region Parameters
    /// <summary>
    /// Selector is used because it's currently noy possible to pass element references as parameter
    /// See also https://github.com/dotnet/aspnetcore/issues/15187
    /// </summary>
    [Parameter]
    public string ScrollContainerElementSelector { get; set; }
    [Parameter]
    public Func<ItemProducerArgs, ValueTask<IEnumerable<TItem>>> ItemProducer { get; set; }
    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }
    /// <summary>
    /// Used to select the key of the item, must be unique
    /// </summary>
    [Parameter]
    public Func<TItem, string> ItemKeySelector { get; set; }
    [Parameter]
    public int WantedNrOfItemsAboveViewPort { get; set; } = 20;
    [Parameter]
    public int WantedNrOfItemsBelowViewPort { get; set; } = 20;
    /// <summary>
    /// The nr of items remaining before loading new entries
    /// This prevents loading new items for each item scrolled down or up
    /// </summary>
    [Parameter]
    public int RefreshItemsListThreshold { get; set; } = 10;
    #endregion

    private static int _lastInstanceNr = 0;
    private int _instanceId;

    private DotNetObjectReference<VirtualScroller<TItem>> _virtualScrollerObjRef;
    private ElementReference _containerElement;

    private TItem _viewPortTopItem;
    private TItem _viewPortBottomItem;
    private List<TItem> _items = new List<TItem>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (ItemKeySelector == null)
        {
            throw new InvalidOperationException($"{nameof(ItemKeySelector)} should not be null");
        }

        if (ItemProducer == null)
        {
            throw new InvalidOperationException($"{nameof(ItemProducer)} should not be null");
        }

        _instanceId = ++_lastInstanceNr;

        _virtualScrollerObjRef = DotNetObjectReference.Create(this);
        var itemsInViewPort = await ItemProducer(new ItemProducerArgs { NrOfItemsToLoad = WantedNrOfItemsBelowViewPort, ScrollDirection = ScrollDirection.Down });
        var itemsBeforeViewPort = (await GetItemsBeforeIdAsync(ItemKeySelector(itemsInViewPort.First()), WantedNrOfItemsAboveViewPort));
        _items = itemsBeforeViewPort.Reverse()
            .Concat(itemsInViewPort)
            .Concat(await GetItemsAfterIdAsync(ItemKeySelector(itemsInViewPort.Last()), WantedNrOfItemsBelowViewPort))
            .ToList();

        ScheduleAsyncActionAfterRender(() => JSRuntime.InvokeVoidAsync("bzrVirtualScroller.init", ScrollContainerElementSelector, _containerElement, _virtualScrollerObjRef));
        ScheduleAsyncActionAfterRender(() => JSRuntime.InvokeVoidAsync("bzrVirtualScroller.scrollPastTopItems", _virtualScrollerObjRef, itemsBeforeViewPort.Count()));
        ScheduleAsyncActionAfterRender(() => JSRuntime.InvokeVoidAsync("bzrVirtualScroller.ensureAllItemIntersectionsAreObserved", _virtualScrollerObjRef));
    }

    #region Logging
    private void LogDebug(string msgTpl, params object[] tplArgs) => Log(LogLevel.Debug, msgTpl, tplArgs);
    private void LogError(string msgTpl, params object[] tplArgs) => Log(LogLevel.Error, msgTpl, tplArgs);

    private void Log(LogLevel level, string msgTpl, params object[] tplArgs)
    {
        msgTpl = string.Format("[{0}] {1}", _instanceId, msgTpl);
        Logger.Log(level, msgTpl, tplArgs);
    }
    #endregion

    #region UpdateItemsListAsync
    private async Task<IEnumerable<TItem>> GetItemsAfterIdAsync(string afterItemId, int nrOfItems)
    {
        return await ItemProducer(new ItemProducerArgs { ItemId = afterItemId, NrOfItemsToLoad = nrOfItems, ScrollDirection = ScrollDirection.Down });
    }

    private async Task<IEnumerable<TItem>> GetItemsBeforeIdAsync(string beforeItemId, int nrOfItems)
    {
        return await ItemProducer(new ItemProducerArgs { ItemId = beforeItemId, NrOfItemsToLoad = nrOfItems, ScrollDirection = ScrollDirection.Up });
    }

    //This lock prevents multiple UpdateViewportAsync calls running concurrently (this method isn't thread safe)
    private SemaphoreSlim _updateViewportLock = new SemaphoreSlim(1);
    private Guid _lastUpdateViewportAsyncCall;

    [JSInvokable]
    public async Task UpdateViewportAsync(IEnumerable<string> visibleItemIds)
    {
        //Nothing visible keep things as they were
        if (!visibleItemIds.Any())
        {
            return;
        }

        var callId = Guid.NewGuid();
        _lastUpdateViewportAsyncCall = callId;

        await _updateViewportLock.WaitAsync();

        //When a user scrolls fast multiple call can be waiting, in that case we only want the last one
        if (_lastUpdateViewportAsyncCall != callId)
        {
            _updateViewportLock.Release();
            return;
        }

        _pauseRendering = true;

        LogDebug("{0} invoked with ids {1}", nameof(UpdateViewportAsync), string.Join(", ", visibleItemIds));

        var itemIndexes = visibleItemIds
            .Select(id => _items.FindIndex(entry => ItemKeySelector(entry) == id))
            .OrderBy(itemIndex => itemIndex)
            .ToArray();

        //Detect outdated calls
        if (itemIndexes.Contains(-1))
        {
            LogDebug("{0} called with a nonexisting itemId(s), assuming this is an outdated event. visibleItemIds: {1}.",
                nameof(UpdateViewportAsync), string.Join(", ", visibleItemIds));

            _updateViewportLock.Release();
            return;
        }

        //Nothing visible keep things as they were
        if (!visibleItemIds.Any())
        {
            _updateViewportLock.Release();
            return;
        }

        var viewPortTopItemIndex = itemIndexes.First();
        var viewPortBottomItemIndex = itemIndexes.Last();

        LogDebug("Topviewport index is {0}", viewPortTopItemIndex);

        _viewPortTopItem = _items[viewPortTopItemIndex];
        _viewPortBottomItem = _items[viewPortBottomItemIndex];
        var anyChange = await UpdateItemsListAsync();

        if (anyChange)
        {
            this.ScheduleActionAfterRender(() => _updateViewportLock.Release());
            _pauseRendering = false;
            this.StateHasChanged();
        }
        else
        {
            _pauseRendering = false;
            _updateViewportLock.Release();
        }
    }

    /// <summary>
    /// Updates the items list if the user has scrolled near the top or botttom
    /// This method tries to retain the same nr of elements for perf reasons.
    ///     The optimization has 1 exception:
    ///     When the user scrolls near the end (can be top or bottom) of the list the nr of elements will decrease
    /// </summary>
    /// <returns></returns>
    private async Task<bool> UpdateItemsListAsync()
    {
        LogDebug("Updating items list");
        var anyChange = false;

        if (await AddBottomItemsIfBottomIsInSightAsync())
        {
            RemoveTopItemsIfTopIsFarAway();
            anyChange = true;
        }

        if (await PrependTopItemsIfTopIsInSightAsync())
        {
            RemoveBottomItemsIfBottomIsFarAway();
            anyChange = true;
        }

        if (anyChange)
        {
            ScheduleAsyncActionAfterRender(() => JSRuntime.InvokeVoidAsync("bzrVirtualScroller.ensureAllItemIntersectionsAreObserved", _virtualScrollerObjRef));
        }

        return anyChange;
    }

    private async Task<bool> AddBottomItemsIfBottomIsInSightAsync()
    {
        var currentItemIndex = _items.IndexOf(_viewPortBottomItem);

        //Check if threshold below viewport reached
        var nrOfItemsBelowCurrentItem = _items.Count - currentItemIndex - 1;
        if (nrOfItemsBelowCurrentItem < RefreshItemsListThreshold)
        {
            //Ensure we're not at the absolute bottom when adding new items since that would stick even when we add new items
            await JSRuntime.InvokeVoidAsync("bzrVirtualScroller.ensureUserIsNotScrolledToTheBottom", _virtualScrollerObjRef);

            var nrOfItemsToLoad = WantedNrOfItemsBelowViewPort - nrOfItemsBelowCurrentItem;
            LogDebug("Loading {0} items to add to the bottom of the list", nrOfItemsToLoad);
            var newItems = await GetItemsAfterIdAsync(ItemKeySelector(_items.Last()), nrOfItemsToLoad);
            _items.AddRange(newItems.Take(nrOfItemsToLoad));
            return true;
        }

        return false;
    }

    private async Task<bool> PrependTopItemsIfTopIsInSightAsync()
    {
        //Check if threshold above viewport reached
        var currentItemIndex = _items.IndexOf(_viewPortTopItem);
        var nrOfItemsAboveCurrentItem = currentItemIndex;
        if (nrOfItemsAboveCurrentItem < RefreshItemsListThreshold)
        {
            LogDebug("Loading items to add to the top of the list");
            var nrOfItemsToLoad = WantedNrOfItemsAboveViewPort - nrOfItemsAboveCurrentItem;
            var newItems = await GetItemsBeforeIdAsync(ItemKeySelector(_items[0]), nrOfItemsToLoad);
            _items.InsertRange(0, newItems.Take(nrOfItemsToLoad).Reverse());
            ScheduleAsyncActionAfterRender(async () => await JSRuntime.InvokeAsync<bool>("bzrVirtualScroller.scrollPastTopItems", _virtualScrollerObjRef, nrOfItemsToLoad));
            return true;
        }

        return false;
    }

    private void RemoveBottomItemsIfBottomIsFarAway()
    {
        //Check if there are to many items below the viewport
        var currentItemIndex = _items.IndexOf(_viewPortBottomItem);
        var nrOfItemsBelowCurrentItem = _items.Count - currentItemIndex;
        if (nrOfItemsBelowCurrentItem > WantedNrOfItemsBelowViewPort)
        {
            LogDebug("Removing items from the bottom of the list");
            var nrOfItemsToRemove = nrOfItemsBelowCurrentItem - WantedNrOfItemsBelowViewPort;
            _items = _items.Take(_items.Count - nrOfItemsToRemove).ToList();
        }
    }

    private void RemoveTopItemsIfTopIsFarAway()
    {
        //Check if there are to many items above the viewport
        var currentItemIndex = _items.IndexOf(_viewPortTopItem);
        var nrOfItemsAboveCurrentItem = currentItemIndex;
        if (nrOfItemsAboveCurrentItem > WantedNrOfItemsAboveViewPort)
        {
            LogDebug("Removing items from the top of the list");
            var nrOfItemsToRemove = nrOfItemsAboveCurrentItem - WantedNrOfItemsAboveViewPort;
            _items = _items.Skip(nrOfItemsToRemove).ToList();
        }
    }
    #endregion

    #region rendering
    private List<Func<ValueTask>> _actionsAfterNextRender = new List<Func<ValueTask>>(); //This allows us to call JS after blazor rendered
    private bool _pauseRendering = false; //setting this prevent useless renders on await in the middle of a function

    private void ScheduleActionAfterRender(Action action)
    {
        ScheduleAsyncActionAfterRender(() =>
        {
            action();
            return new ValueTask();
        });
    }

    private void ScheduleAsyncActionAfterRender(Func<ValueTask> asyncAction)
    {
        _actionsAfterNextRender.Add(asyncAction);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_actionsAfterNextRender.Any())
        {
            //Pause rendering to prevent the await to trigger a new render
            this._pauseRendering = true;

            //Run JS after render
            foreach (var actionAfterRenderAsync in _actionsAfterNextRender)
            {
                await actionAfterRenderAsync();
            }
            _actionsAfterNextRender.Clear();

            this._pauseRendering = false;
        }
    }

    protected override bool ShouldRender()
    {
        return _pauseRendering ? false : base.ShouldRender();
    }
    #endregion

    public async void Dispose() //IAsyncDisposable not yet supported see https://github.com/dotnet/aspnetcore/issues/9960
    {
        LogDebug("Disposing...");
        try
        {
            await JSRuntime.InvokeVoidAsync("bzrVirtualScroller.dispose", _virtualScrollerObjRef);
            _virtualScrollerObjRef?.Dispose();
        }
        catch (Exception e)
        {
            //Since async void effectively is a fire and forget, we need to do the error handling
            LogError("Exception occurred while disposing VirtualScroller: {0}", e);
        }
    }

}
